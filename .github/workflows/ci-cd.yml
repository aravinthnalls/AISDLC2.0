name: qr-generator-auto-pipeline
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
  workflow_dispatch: {}
env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0
jobs:
  validate:
    name: Validate Code and Infrastructure
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Validate YAML files
      run: find . -name "*.yml" -o -name "*.yaml" | xargs -I {} sh -c 'echo "Validating
        {}" && python -c "import yaml; yaml.safe_load(open('{}'))" || exit 1'
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install backend dependencies
      run: cd backend && pip install -r requirements.txt
    - name: Lint backend code
      run: cd backend && flake8 || echo 'Linting not configured'
      continue-on-error: true
    - name: Test backend code
      run: cd backend && pytest || echo 'Tests not configured'
      continue-on-error: true
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Install frontend dependencies
      run: cd frontend && npm install
    - name: Lint frontend code
      run: cd frontend && npm run lint || echo 'Linting not configured'
      continue-on-error: true
    - name: Test frontend code
      run: cd frontend && npm test || echo 'Tests not configured'
      continue-on-error: true
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs:
    - validate
    - test
    if: github.ref == 'refs/heads/main'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    - name: Terraform Init
      run: "\n                    cd terraform\n                    terraform init\n\
        \                    "
    - name: Terraform Plan
      run: "\n                    cd terraform\n                    terraform plan\
        \ -out=tfplan\n                    "
    - name: Terraform Apply
      run: "\n                    cd terraform\n                    terraform apply\
        \ -auto-approve tfplan\n                    "
    - name: Get deployment info
      id: deployment
      run: "\n                    cd terraform\n                    echo \"public_ip=$(terraform\
        \ output -raw public_ip)\" >> $GITHUB_OUTPUT\n                    echo \"\
        frontend_url=$(terraform output -raw application_urls | jq -r .frontend)\"\
        \ >> $GITHUB_OUTPUT\n                    echo \"backend_url=$(terraform output\
        \ -raw application_urls | jq -r .backend_api)\" >> $GITHUB_OUTPUT\n      \
        \              "
    - name: Wait for application startup
      run: "\n                    echo \"Waiting for application to start...\"\n \
        \                   sleep 60\n                    \n                    #\
        \ Check application health\n                    curl -f ${{ steps.deployment.outputs.backend_url\
        \ }}/health || echo \"Backend health check failed\"\n                    curl\
        \ -f ${{ steps.deployment.outputs.frontend_url }} || echo \"Frontend health\
        \ check failed\"\n                    "
    - name: Send deployment notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: '587'
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: QR Generator Deployment ${{ job.status }}
        to: demo@example.com
        from: ${{ secrets.EMAIL_USERNAME }}
        body: "\n                    Deployment Status: ${{ job.status }}\n      \
          \              \n                    Frontend URL: ${{ steps.deployment.outputs.frontend_url\
          \ }}\n                    Backend API: ${{ steps.deployment.outputs.backend_url\
          \ }}\n                    \n                    Commit: ${{ github.sha }}\n\
          \                    Repository: ${{ github.repository }}\n            \
          \        "
